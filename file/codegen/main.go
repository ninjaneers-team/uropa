package main

import (
	"bytes"
	"encoding/json"
	"github.com/alecthomas/jsonschema"
	"github.com/ninjaneers-team/uropa/file"
	"github.com/ninjaneers-team/uropa/opa"
	"io/ioutil"
	"log"
	"reflect"
	"text/template"
)

const templateContent = `// Code generated by go generate; DO NOT EDIT.
package file

const contentSchema = ` + "`{{.Schema}}`\n"

type templateData struct {
	Schema string
}

var (
	// policies
	anyOfNameOrID = []*jsonschema.Type{
		{
			Required: []string{"id"},
		},
		{
			Required: []string{"name"},
		},
	}
)

func main() {
	var reflector jsonschema.Reflector
	reflector.ExpandedStruct = true
	reflector.TypeMapper = func(typ reflect.Type) *jsonschema.Type {
		// plugin configuration
		if typ == reflect.TypeOf(opa.Configuration{}) {
			return &jsonschema.Type{
				Type:                 "object",
				Properties:           map[string]*jsonschema.Type{},
				AdditionalProperties: []byte("true"),
			}
		}
		return nil
	}
	schema := reflector.Reflect(file.Content{})
	schema.Definitions["Policies"].AnyOf = anyOfNameOrID

	jsonSchema, err := json.MarshalIndent(schema, "", "  ")
	if err != nil {
		log.Fatalln(err)
	}

	tmpl := template.New("codegen")
	tmpl, err = tmpl.Parse(templateContent)
	if err != nil {
		log.Fatalln(err)
	}

	var buffer bytes.Buffer
	err = tmpl.Execute(&buffer, templateData{string(jsonSchema)})
	if err != nil {
		log.Fatalln(err)
	}
	err = ioutil.WriteFile("schema.go", buffer.Bytes(), 0644)
	if err != nil {
		log.Fatalln(err)
	}
}
